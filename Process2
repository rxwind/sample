using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Transactions;

namespace System_Ticketing
{
    public partial class fUser : Form
    {
        public fUser()
        {
            InitializeComponent();
            v.col = Controls;
            v.pacinput = pInput.Controls;
        }
        void load()
        {
            dgv.DataSource = x.dc.Users.Select(a => new {a.Id_User,a.Username,a.First_Name,a.Last_Name,a.Email,a.Town,a.Country,a.Address, a.Postcode, a.Note }).ToList();
            dgvdesign();
        }
        void dgvdesign()
        {

        }

       

        private void bInsert_Click(object sender, EventArgs e)
        {
            v.clearbox();
            x.updatemode = false;
            bUpdate.BackColor = x.cUpdatebackcolor;
            if (x.insertmode == true)
            {
                x.insertmode = false;
                v.enablefalse();
                bInsert.BackColor = x.cInsertbackcolor;
            }
            else
            {
                x.insertmode = true;
                enabletrue();
                rnd();
                bInsert.BackColor = x.cInsertclick;
            }
        }
        void rnd()
        {
            Random r = new Random();
            string chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            string r1 = chars[r.Next(chars.Length)].ToString();
            string r2 = chars[r.Next(chars.Length)].ToString();
            string r3 = chars[r.Next(chars.Length)].ToString();
            string r4 = chars[r.Next(chars.Length)].ToString();
            string r5 = chars[r.Next(chars.Length)].ToString();
            string r6 = chars[r.Next(chars.Length)].ToString();
            boxIduser.Text = "XU" + r1 + r2 + r3 + r4 + r5 + r6 ;
        }
        private void bUpdate_Click(object sender, EventArgs e)
        {
            if (dgv.RowCount > 0)
            {
                v.clearbox();
                x.insertmode = false;
                bInsert.BackColor = x.cInsertbackcolor;
                if (x.updatemode == true)
                {
                    x.updatemode = false;
                    v.enablefalse();
                    bUpdate.BackColor = x.cUpdatebackcolor;
                }
                else
                {
                    x.updatemode = true;
                    dgv_SelectionChanged(null, null);
                    enabletrue();
                    boxUsername.ReadOnly = true;
                    bUpdate.BackColor = x.cUpdateclick;
                }
            }
            else { x.nRowcountzero(); }
        }
        void enabletrue()
        {
            bSubmit.Enabled = true;
            boxIduser.Enabled = true; boxIduser.ReadOnly = true;
            boxUsername.Enabled = true;
            boxPassword.Enabled = true;
            boxFirstN.Enabled = true;
            boxLastN.Enabled = true;
            boxEmail.Enabled = true;
            boxTown.Enabled = true;
            boxCountry.Enabled = true;
            boxPostcode.Enabled = true;
            boxAddress.Enabled = true;
        }
        

        private void bDelete_Click(object sender, EventArgs e)
        {
            delete();
        }
        void delete()
        {
            if (dgv.RowCount > 0)
            {
                string deleteid = dgv.CurrentRow.Cells[0].Value.ToString();
                x.us = x.dc.Users.FirstOrDefault(i => i.Id_User.ToString() == deleteid);
                if (x.sh != null)
                {
                    x.dc.Users.DeleteOnSubmit(x.us);
                    x.dc.SubmitChanges();
                }
                else { x.nChooserow(); }
                load();
            }
            else { x.nRowcountzero(); }
        }

        private void bNote_Click(object sender, EventArgs e)
        {
            if (dgv.RowCount > 0)
            {
                x.id = dgv.CurrentRow.Cells[0].Value.ToString();
                x.notetxt = dgv.CurrentRow.Cells["Note"].Value.ToString();
                if (x.note.ShowDialog() == DialogResult.OK)
                {
                    x.us = x.dc.Users.FirstOrDefault(i => i.Id_User.ToString() == x.id);
                    x.us.Note = x.notetxt;
                    x.dc.SubmitChanges();
                    load();
                }
            }
            else { x.nRowcountzero(); }
        }

        private void bRefresh_Click(object sender, EventArgs e)
        {
            load();
        }

        private void bClear_Click(object sender, EventArgs e)
        {
            v.clearbox();
        }

        private void bSubmit_Click(object sender, EventArgs e)
        {
            prosessubmit();
        }
        void prosessubmit()
        {
            if(v.validasi() == true)
            {
                x.us = x.dc.Users.FirstOrDefault(i => i.Id_User.ToString() == boxIduser.Text);
                if (x.us != null) { if (x.updatemode == true) { input("update"); } if (x.insertmode == true) { x.nAlreadyuse(); } }
                else {
                    if (x.insertmode == true)
                    {
                        input("insert");
                    }
                }
                load();
            }
        }
        void input(string inputs)
        {
            try
            {
                using (TransactionScope ts = new TransactionScope())
                {
                    x.us = x.dc.Users.FirstOrDefault(a => a.Username == boxUsername.Text);
                    if (x.us != null && x.updatemode == false)
                    {
                        x.nUsernameAlreadyuse();
                    }
                    else
                    {
                        x.us = inputs == "insert" ? new User() : x.dc.Users.FirstOrDefault(i => i.Id_User.ToString() == boxIduser.Text);
                        x.us.Username = boxUsername.Text;
                        x.us.Password = boxPassword.Text;
                        x.us.First_Name = boxFirstN.Text;
                        x.us.Last_Name = boxLastN.Text;
                        x.us.Email = boxEmail.Text;
                        x.us.Town = boxTown.Text;
                        x.us.Country = boxCountry.Text;
                        x.us.Postcode = boxPostcode.Text;
                        x.us.Address = boxAddress.Text;
                        if (inputs == "insert")
                        {
                            x.us.Id_User = boxIduser.Text;
                            x.us.Note = "";
                            x.dc.Users.InsertOnSubmit(x.us);
                            x.dc.SubmitChanges();
                            v.clearbox();
                            rnd();
                        }
                        else if (inputs == "update")
                        {
                            x.dc.SubmitChanges();
                            x.nUpdate();
                        }
                    }
                    ts.Complete();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

        }

        private void fUser_Load(object sender, EventArgs e)
        {
            load();
            v.enablefalse();
            v.clearbox();
        }

        private void dgv_SelectionChanged(object sender, EventArgs e)
        {
            if ((dgv.CurrentRow != null) && (x.updatemode == true))
            {
                boxIduser.Text = dgv.CurrentRow.Cells["Id_User"].Value.ToString();
                boxUsername.Text = dgv.CurrentRow.Cells["Username"].Value.ToString();
                boxPassword.Text = "***";
                boxFirstN.Text = dgv.CurrentRow.Cells["First_Name"].Value.ToString();
                boxLastN.Text = dgv.CurrentRow.Cells["Last_Name"].Value.ToString();
                boxEmail.Text = dgv.CurrentRow.Cells["Email"].Value.ToString();
                boxTown.Text = dgv.CurrentRow.Cells["Town"].Value.ToString();
                boxCountry.Text = dgv.CurrentRow.Cells["Country"].Value.ToString();
                boxPostcode.Text = dgv.CurrentRow.Cells["Postcode"].Value.ToString();
                boxAddress.Text = dgv.CurrentRow.Cells["Address"].Value.ToString();

            }
        }
        private void boxSearch_Click(object sender, EventArgs e)
        {
            search();
        }
        void search()
        {
            dgv.DataSource = x.dc.Users.Where(a => a.Id_User.Contains(boxSearch.Text) || a.Username.Contains(boxSearch.Text) || a.First_Name.Contains(boxSearch.Text)
           || a.Last_Name.Contains(boxSearch.Text) || a.Email.Contains(boxSearch.Text) || a.Town.Contains(boxSearch.Text) ||
           a.Country.Contains(boxSearch.Text) || a.Address.Contains(boxSearch.Text)).ToList();
            dgvdesign();
        }
        private void boxSearch_KeyDown(object sender, KeyEventArgs e)
        {
            if(e.KeyCode == Keys.Enter) { search(); }
        }

        private void boxIduser_ButtonClick(object sender, EventArgs e)
        {
            rnd();
        }
       
    }
}
